@inject Blazored.LocalStorage.ILocalStorageService _LocalStorage
@inject IRefreshToken _RefreshToken
@inject NavigationManager _NavigationManager

@using TANE.Application.Common.Exceptions
@using TANE.Application.Groups.JwtTokens.Commands.Interfaces
@using TANE.Presentation.BlazorWebAssemply.Helpers

<a href="https://learn.microsoft.com/aspnet/core/" target="_blank">About</a>
@if (JwtIsNotNull() && ShowLogInAndOut)
{
    <a href="/logout">Log ud</a>

    <a>@TokenExpiration.ToString()</a>
}
else if (!JwtIsNotNull() && ShowLogInAndOut)
{
    <a href="/login">Log ind</a>
}


@code {
    [Parameter]
    public bool ShowLogInAndOut { get; set; } = true;

    public string? Token { get; set; } = null;
    public string? RefreshToken { get; set; } = null;
    public DateTime? TokenExpiration { get; set; } = null;

    protected override async Task OnInitializedAsync()
    {
        //Get tokens from local storage
        LocalStorageHandler localStorageHandler = new LocalStorageHandler(_LocalStorage);

        Token = await localStorageHandler.GetTokenAsync();
        RefreshToken = await localStorageHandler.GetRefreshTokenAsync();
        var tokenExpirationString = await localStorageHandler.GetTokenExpirationAsync();
        if (tokenExpirationString != null)
        {
            TokenExpiration = DateTime.Parse(tokenExpirationString);
        }


        //Check if token is expired and get new token if needed
        if (JwtIsNotNull() && TokenExpiration < DateTime.UtcNow)
        {
            //Handle token expired
            try
            {
                //Get new token
                var newJwtToken = await _RefreshToken.RefreshTokenAsync(Token!, RefreshToken!);

                //Set to local storage
                await localStorageHandler.SetJwtAsync(newJwtToken.Token, newJwtToken.RefreshToken, newJwtToken.Expiration.ToString());
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);

                //Handle token expired

                //Remove tokens from local storage
                await localStorageHandler.RemoveTokenAsync();
                await localStorageHandler.RemoveRefreshTokenAsync();
                await localStorageHandler.RemoveTokenExpirationAsync();

                //Redirect to login page
                _NavigationManager.NavigateTo("/login", true);
            }

            //Get new token
            var newToken = await localStorageHandler.GetTokenAsync();
        }
    }

    private bool JwtIsNotNull()
    {
        if (Token == null) return false;
        if (TokenExpiration == null) return false;
        if (RefreshToken == null) return false;

        return true;
    }
}
