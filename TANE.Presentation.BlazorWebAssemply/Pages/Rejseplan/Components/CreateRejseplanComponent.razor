@using TANE.Application.Dtos
@using System.Collections.ObjectModel
@using TANE.Application.Groups.Kunder.Queries.Interfaces
@using TANE.Application.RepositoryInterfaces
@using TANE.Domain.Entities
@using TANE.Presentation.BlazorWebAssemply.Configuration
@using TANE.Presentation.BlazorWebAssemply.Pages.Kunder.Component
@using TANE.Presentation.BlazorWebAssemply.Pages.Tur.Components


@inject CustomStateProvider AuthStateProvider
@inject ITurRepository TurRepository
@inject IReadKunde ReadKunde
@inject DialogService DialogService
@inject CustomerState CustomerState


<RadzenDialog />
<RadzenDialogService />

<div class="rz-p-0 rz-p-md-12">
    <h4>Opret Ny Rejseplan</h4>
    <RadzenTemplateForm TItem="RejseplanCreateDto" Data=@Rejseplan Submit=@OnSubmit InvalidSubmit=@OnInvalidSubmit>
        <RadzenStack Gap="1rem" class="rz-p-sm-12">

            <!-- Kunde-søgning + knap til ny kunde -->
            <RadzenFormField Text="Kunde" Variant="@ThemeConfig.FormVariant">
                <ChildContent>
                    <div style="display: flex; align-items: center;">
                        <!-- Autocomplete til at vælge eksisterende kunde -->
                        <RadzenAutoComplete Name="Kunde" @bind-Value="selectedCustomerEmail"
                                            Data="@Kunder"
                                            TextProperty="Email"
                                            ValueProperty="Id"
                                            AllowFiltering="true"
                                            FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                            Placeholder="Indtast eller vælg kunde..."
                                            Style="flex: 1" />

                        <!-- Knap til at åbne opret-kunde-dialog -->
                        <RadzenButton Icon="add_circle"
                                      ButtonType="ButtonType.Button"
                                      Style="margin-left: 8px;"
                                      Click="@OpenNyKundeDialog" />
                    </div>
                </ChildContent>
                <Helper>
                    <RadzenRequiredValidator Component="Kunde"
                                             Text="Vælg en kunde." />
                </Helper>
            </RadzenFormField>

            <!-- Titel -->
            <RadzenFormField Text="Titel" Variant="@ThemeConfig.FormVariant">
                <ChildContent>
                    <RadzenTextBox Name="Titel" @bind-Value=@Rejseplan.Titel Style="width:100%" />
                </ChildContent>
                <Helper>
                    <RadzenRequiredValidator Component="Titel" Text="Titel skal udfyldes." />
                </Helper>
            </RadzenFormField>

            <!-- Beskrivelse -->
            <RadzenFormField Text="Beskrivelse" Variant="@ThemeConfig.FormVariant">
                <ChildContent>
                    <RadzenTextArea Name="Beskrivelse" @bind-Value=@Rejseplan.Beskrivelse Rows="4" Style="width:100%" />
                </ChildContent>
                <Helper>
                    <RadzenRequiredValidator Component="Beskrivelse" Text="Beskrivelse skal udfyldes." />
                </Helper>
            </RadzenFormField>

            <!-- Antal Voksne / Antal Børn -->
            <RadzenStack Direction="Row" Gap="1rem">
                <RadzenFormField Text="Antal Voksne" Variant="@ThemeConfig.FormVariant">
                    <ChildContent>
                        <RadzenNumeric Name="AntalVoksne" @bind-Value=@Rejseplan.AntalVoksne Style="width:100%" />
                    </ChildContent>
                </RadzenFormField>
                <RadzenFormField Text="Antal Børn" Variant="@ThemeConfig.FormVariant">
                    <ChildContent>
                        <RadzenNumeric Name="AntalBørn" @bind-Value=@Rejseplan.AntalBørn Style="width:100%" />
                    </ChildContent>
                </RadzenFormField>
            </RadzenStack>

            <!-- Lufthavn -->
            <RadzenFormField Text="Lufthavn" Variant="@ThemeConfig.FormVariant">
                <ChildContent>
                    <RadzenTextBox Name="Lufthavn" @bind-Value=@Rejseplan.Lufthavn Style="width:100%" />
                </ChildContent>
            </RadzenFormField>

            <!-- FlyPris -->
            <RadzenFormField Text="Fly Pris (DKK)" Variant="@ThemeConfig.FormVariant">
                <ChildContent>
                    <RadzenNumeric Name="FlyPris" @bind-Value=@Rejseplan.FlyPris Style="width:100%" Step="0.01" />
                </ChildContent>
            </RadzenFormField>

            <!-- Antal Dage -->
            <RadzenFormField Text="Antal Dage" Variant="@ThemeConfig.FormVariant">
                <ChildContent>
                    <RadzenNumeric Name="AntalDage" @bind-Value=@Rejseplan.AntalDage Style="width:100%" />
                </ChildContent>
            </RadzenFormField>

            <!-- Afrejse Tidspunkt -->
            <RadzenFormField Text="Afrejse Tidspunkt" Variant="@ThemeConfig.FormVariant">
                <ChildContent>
                    <RadzenDatePicker Name="AfrejseTidspunkt" @bind-Value=@Rejseplan.AfrejseTidspunkt Style="width:100%" ShowTime="true" />
                </ChildContent>
            </RadzenFormField>

            <br />

            <h4>Vælg ture:</h4>
            <TurReorderListComponent InjectedTure="Observableture" OnDelete="OnTurDelete" />
            <div style="text-align: right; width: 100%;">
                <RadzenButton ButtonType="ButtonType.Button" Size="ButtonSize.Medium"
                              Style="width:150px" Text="Tilføj Tur"
                              Click="@(() => showAddTur = !showAddTur)" />
            </div>

            @if (showAddTur)
            {
                <TurListComponent InjectedTure="Ture" OnSelect="OnTurRowSelect" />
            }

            <br />

            <RadzenButton ButtonType="ButtonType.Submit" Size="ButtonSize.Large" Text="Opret Rejseplan" Style="width:200px" />
        </RadzenStack>
    </RadzenTemplateForm>
</div>

@code{
    [Inject] 
    private IRejsePlanRepository _RejseplanRepository { get; set; } = default!;

    [Inject] private IKundeRepository KundeRepository { get; set; } = default!;

    private List<Kunde> Kunder = new List<Kunde>();

    [Parameter, EditorRequired]
    public List<TurReadDto> InjectedTure { get; set; } = new List<TurReadDto>();

    string selectedCustomerEmail;  // Variable to hold selected customer email
    private string? _token;
    bool showAddTur = false;

    private ObservableCollection<TurReadDto> SelectedtureVar = new ObservableCollection<TurReadDto>();

    public ObservableCollection<TurReadDto> Observableture
    {
        get
        {
            return SelectedtureVar;
        }
        set 
        { 
            SelectedtureVar = value;
        }
    }

    public RejseplanCreateDto Rejseplan { get; set; } = new RejseplanCreateDto();

    private List<TurReadDto> TurVar = new List<TurReadDto>();

    public List<TurReadDto> Ture
    {
        get
        {
            // return TurVar excluding entities already in ObservableTur
            return TurVar.Where(d => !Observableture.Any(o => o.Id == d.Id)).ToList();
        }
        set
        {
            TurVar = value;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        _token = AuthStateProvider.CurrentUser.Token;

    // Faktisk hentning af alle ture:
        var alleture = await TurRepository.ReadAllTure(_token);
        Ture = alleture;   // udfylder din property, så Injectedture ikke længere er nødvendig

        Kunder = await ReadKunde.GetAllKunderAsync(_token);

        // if (CustomerState.Kunde != null)
        // {
        //     selectedCustomerEmail = CustomerState.Kunde.Email;
        // }
    }

    

    async Task OnSubmit()
    {
        
        Console.WriteLine($"Titel: {Rejseplan.Titel}\nBeskrivelse: {Rejseplan.Beskrivelse}");
        _RejseplanRepository.CreateRejseplan(Rejseplan, _token);
        CustomerState.Kunde = null;
    }

    void OnInvalidSubmit(FormInvalidSubmitEventArgs args)
    {

    }

    private void OnTurRowSelect(TurReadDto Tur)
    {
        Observableture.Add(Tur);

        showAddTur = !showAddTur;
    }

    private void OnTurDelete(TurReadDto Tur)
    {
        Observableture.Remove(Tur);
    }
  

    async Task LoadCustomers(LoadDataArgs args)
    {
    // Antag du har et repo-metode der tager filter-tekst og returnerer Task<IEnumerable<KundeDto>>
     //   Kunder = await KundeRepository.SearchCustomersAsync(args.Filter);

        string filterText = args.Filter?.ToString().ToLower() ?? string.Empty;
        var filteredCustomers = Kunder.Where(k => k.Email.ToLower().Contains(filterText)).ToList();
        await Task.CompletedTask;
    }

    async Task OpenNyKundeDialog()
    {
    // Her åbner du fx en RadzenDialog eller navigerer til kundeoprettelse
      var result = await DialogService.OpenAsync<CreateKundeComponent>("Opret Kunde", new Dictionary<string, object>());


        if (result is Kunde nyKunde)
        {
            // nu har du dit oprettede kunde-objekt i 'nyKunde'
            CustomerState.Kunde = nyKunde;
            Kunder.Add(nyKunde);
            selectedCustomerEmail = nyKunde.Email; // opdaterer den valgte kunde
        }

    }
}
