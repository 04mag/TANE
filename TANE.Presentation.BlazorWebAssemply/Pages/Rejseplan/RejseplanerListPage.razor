@page "/rejseplaner"
@using TANE.Application.Dtos
@using TANE.Application.Groups.RejsePlaner.Queries.Interfaces
@using TANE.Application.RepositoryInterfaces
@using TANE.Presentation.BlazorWebAssemply.Pages.Rejseplan.Components
@inject IReadRejsePlan ReadRejseplan
@inject CustomStateProvider AuthStateProvider
@inject IRejsePlanRepository RejseplanRepository

<h3>Rejseplaner</h3>

<RadzenButton Icon="add_circle"
              Style="margin-bottom:10px"
              Text="Ny Rejseplan"
              Click="CreateNew" />

<RejseplanListComponent Data="AlleRejseplaner" OnEdit="BeginEdit" />

@if (isEditing)
{
    <div class="mt-4">
        <EditRejseplanComponent 
            Item="SelectedRejseplan" 
            OnSaved="SaveEdit" 
            OnCancelled="CancelEdit" />
    </div>
}

@code {
    private List<RejseplanReadDto> AlleRejseplaner = new();
    private RejseplanReadDto SelectedRejseplan = default!;
    private bool isEditing;
    private string _token = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        var state = await AuthStateProvider.GetAuthenticationStateAsync();
        _token = AuthStateProvider.CurrentUser.Token;
        AlleRejseplaner = (await ReadRejseplan.ReadRejsePlanerAsync(_token)).ToList();
    }

    void CreateNew()
    {
        // New plan has Id = 0
        SelectedRejseplan = new RejseplanReadDto(); 
        isEditing = true;
    }

    void BeginEdit(RejseplanReadDto plan)
    {
        SelectedRejseplan = plan;
        isEditing = true;
    }

    async Task SaveEdit(RejseplanUpdateDto dto)
    {
    // Update existing plan
     
            dto.RowVersion = SelectedRejseplan.RowVersion;
            await RejseplanRepository.UpdateRejseplan(dto.Id, dto, _token);
        
        var idx = AlleRejseplaner.FindIndex(r => r.Id == dto.Id);
        if (idx >= 0)
        {
    // Map UpdateDto to ReadDto
            var updated = new RejseplanReadDto
            {
                Id               = dto.Id,
                KundeId          = dto.KundeId,
                Titel            = dto.Titel,
                Beskrivelse      = dto.Beskrivelse,
                AntalVoksne      = dto.AntalVoksne,
                AntalBørn        = dto.AntalBørn,
                Lufthavn         = dto.Lufthavn,
                FlyPris          = dto.FlyPris,
                AntalDage        = dto.AntalDage,
                AfrejseTidspunkt = dto.AfrejseTidspunkt,
                TurIds           = dto.TurIds
            };

            AlleRejseplaner[idx] = updated;
        }
    
    // Exit edit mode
        isEditing = false;
    }

    Task CancelEdit()
    {
        isEditing = false;
        return Task.CompletedTask;
    }
}
