@page "/rejseplaner"
@using TANE.Application.Dtos
@using TANE.Application.Groups.RejsePlaner.Queries.Interfaces
@using TANE.Application.RepositoryInterfaces
@using TANE.Presentation.BlazorWebAssemply.Pages.Rejseplan.Components
@inject IReadRejsePlan ReadRejseplan
@inject CustomStateProvider AuthStateProvider
@inject IRejsePlanRepository RejseplanRepository

<h3>Rejseplaner</h3>

<RadzenButton Icon="add_circle" Style="margin-bottom:10px" Text="Ny Rejseplan" Click="CreateNew" />

<RejseplanListComponent Data="AlleRejseplaner" OnEdit="BeginEdit" />

@if (isEditing)
{
    <div class="mt-4">
        <EditRejseplanComponent 
            Item="SelectedRejseplan" 
            OnSaved="SaveEdit" 
            OnCancelled="CancelEdit" />
    </div>
}

@code {
    private List<RejseplanReadDto> AlleRejseplaner = new();
    private RejseplanReadDto SelectedRejseplan = new();
    private bool isEditing;
    private string _token = "";

    protected override async Task OnInitializedAsync()
    {
        var state = await AuthStateProvider.GetAuthenticationStateAsync();
        _token = AuthStateProvider.CurrentUser.Token;
        AlleRejseplaner = (await ReadRejseplan.ReadRejsePlanerAsync(_token)).ToList();
    }

    void CreateNew()
    {
        SelectedRejseplan = new RejseplanReadDto();
        isEditing = true;
    }

    Task BeginEdit(RejseplanReadDto plan)
    {
        SelectedRejseplan = plan;
        isEditing = true;
        return Task.CompletedTask;
    }

    async Task SaveEdit(RejseplanUpdateDto updated)
    {
    // Opret vs. opdater
      
            await RejseplanRepository.UpdateRejseplan(updated.Id, updated, _token);
        

        AlleRejseplaner = (await ReadRejseplan.ReadRejsePlanerAsync(_token)).ToList();
        isEditing = false;
    }

    Task CancelEdit()
    {
        isEditing = false;
        return Task.CompletedTask;
    }
}