@using TANE.Domain.Entities

@inject CustomStateProvider AuthStateProvider
@inject NotificationService NotificationService
@inject NavigationManager NavigationManager

<RadzenTextBox @bind-Value="searchText" @oninput=@HandleInput Placeholder="Søg efter titel" Style="width: 100%" />
<RadzenDataGrid AllowFiltering="true" AllowColumnResize="false" AllowAlternatingRows="false" FilterMode="FilterMode.Advanced" AllowSorting="true" PageSize="10" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
Data="@Skabeloner" ColumnWidth="150px" LogicalFilterOperator="LogicalFilterOperator.Or" SelectionMode="DataGridSelectionMode.Single" @bind-Value=@SelectedSkabeloner>
    <Columns>
        <RadzenDataGridColumn Property="@nameof(RejseplanSkabelon.Id)" Filterable="false" Title="ID" Frozen="true" Width="60px" TextAlign="TextAlign.Left" SortOrder="SortOrder.Descending" />
        <RadzenDataGridColumn Property="@nameof(RejseplanSkabelon.Titel)" Title="Titel" Frozen="false" Width="auto" MinWidth="200px" />
        <RadzenDataGridColumn Context="TurSkabelon" Filterable="false" Sortable="false" Width="auto" TextAlign="TextAlign.Right" Frozen="true" FrozenPosition="FrozenColumnPosition.Right">
            <Template Context="RejsePlanSkabelon">
                @if (OnSelect.HasDelegate)
                {
                    <RadzenButton Icon="file_open" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" Shade="Shade.Lighter" class="rz-my-1 rz-ms-1" Click="@(args => SelectRow(RejsePlanSkabelon))" @onclick:stopPropagation="true" />
                }
                @if (OnEdit.HasDelegate)
                {
                    <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" class="rz-my-1 rz-ms-1" Click="@(args => EditRow(RejsePlanSkabelon))" @onclick:stopPropagation="true" />
                }
                @if (OnDelete.HasDelegate)
                {
                    <RadzenButton Icon="delete" ButtonStyle="ButtonStyle.Danger" Variant="Variant.Flat" Size="ButtonSize.Medium" Shade="Shade.Lighter" class="rz-my-1 rz-ms-1" Click="@(args => DeleteRow(RejsePlanSkabelon))" @onclick:stopPropagation="true" />
                }
            </Template>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>

@code {
    [Parameter, EditorRequired]
    public List<RejseplanSkabelon> InjectedSkabeloner { get; set; }

    [Parameter]
    public EventCallback<RejseplanSkabelon> OnSelect { get; set; }

    [Parameter]
    public EventCallback<RejseplanSkabelon> OnEdit { get; set; }

    [Parameter]
    public EventCallback<RejseplanSkabelon> OnDelete { get; set; }

    private string searchText = string.Empty;

    private IQueryable<RejseplanSkabelon> SkabelonerVar = new List<RejseplanSkabelon>().AsQueryable();

    public IQueryable<RejseplanSkabelon> Skabeloner
    {
        get
        {
            if (string.IsNullOrEmpty(searchText))
            {
                return SkabelonerVar;
            }
            else
            {
                return SkabelonerVar.Where(x => x.Titel.ToLower().Contains(searchText.ToLower()));
            }
        }
        set { SkabelonerVar = value; }
    }

    public IList<RejseplanSkabelon> SelectedSkabeloner { get; set; } = new List<RejseplanSkabelon>();

    protected override void OnInitialized()
    {
        Skabeloner = InjectedSkabeloner.AsQueryable();

        SelectedSkabeloner = new List<RejseplanSkabelon>() { Skabeloner.FirstOrDefault()! };
    }

    protected override async Task OnParametersSetAsync()
    {
        Skabeloner = InjectedSkabeloner.AsQueryable();

        await base.OnParametersSetAsync();
    }

    private void HandleInput(ChangeEventArgs args)
    {
        if (args.Value == null)
        {
            searchText = string.Empty;
            return;
        }
        searchText = args.Value.ToString()!;
    }

    async Task SelectRow(RejseplanSkabelon turskabelon)
    {
        await OnSelect.InvokeAsync(turskabelon);

        Skabeloner = InjectedSkabeloner.AsQueryable();
    }

    async Task EditRow(RejseplanSkabelon turskabelon)
    {
        await OnEdit.InvokeAsync(turskabelon);

        Skabeloner = InjectedSkabeloner.AsQueryable();
    }

    async Task DeleteRow(RejseplanSkabelon turskabelon)
    {
        await OnDelete.InvokeAsync(turskabelon);

        Skabeloner = InjectedSkabeloner.AsQueryable();
    }
}
