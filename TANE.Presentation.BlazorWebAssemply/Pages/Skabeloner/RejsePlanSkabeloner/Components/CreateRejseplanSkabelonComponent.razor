@using System.Collections.ObjectModel
@using TANE.Application.Dtos.Skabeloner
@using TANE.Application.Groups.RejseplanSkabeloner.Commands.Interfaces
@using TANE.Domain.Entities
@using TANE.Presentation.BlazorWebAssemply.Configuration
@using TANE.Presentation.BlazorWebAssemply.Pages.Skabeloner.TurSkabeloner.Components

@inject NotificationService NotificationService
@inject NavigationManager NavigationManager
@inject CustomStateProvider AuthStateProvider
@inject ICreateRejseplanSkabelon CreateRejseplanSkabelon

<div class="rz-p-0 rz-p-md-12">

    @if (showAddTurSkabelon)
    {
        <TurSkabelonListComponent InjectedSkabeloner="TurSkabeloner" OnSelect="OnTurSkabelonRowSelect" />
    }

    @if (!showAddTurSkabelon)
    {
        <h4>Opret Ny Rejseplan Skabelon</h4>
        <RadzenTemplateForm TItem="RejseplanSkabelon" Data=@RejseplanSkabelon Submit=@OnSubmit InvalidSubmit=@OnInvalidSubmit>
            <RadzenStack Gap="1rem" class="rz-p-sm-12">

                <RadzenFormField Text="Titel" Variant="@ThemeConfig.FormVariant">
                    <ChildContent>
                        <RadzenTextBox Name="Titel" @bind-Value=@RejseplanSkabelon.Titel />
                    </ChildContent>
                    <Helper>
                        <RadzenRequiredValidator Component="Titel" Text="Titel skal udfyldes." />
                    </Helper>
                </RadzenFormField>


                <RadzenFormField Text="Beskrivelse" Variant="@ThemeConfig.FormVariant">
                    <ChildContent>
                        <RadzenTextArea Name="Beskrivelse" @bind-Value="@RejseplanSkabelon.Beskrivelse" Rows="4" />
                    </ChildContent>
                    <Helper>
                        <RadzenRequiredValidator Component="Beskrivelse" Text="Beskrivelse skal udfyldes." />
                    </Helper>
                </RadzenFormField>

                <br />

                <h3>Ture:</h3>
                <TurSkabelonReorderListComponent InjectedSkabeloner="ObservableTurSkabeloner" OnDeleteSkabelon="OnTurSkabelonDelete" />
                <div style="text-align: right; width: 100%;">
                    <RadzenButton ButtonType="ButtonType.Button" Size="ButtonSize.Medium" Style="width: 150px" Text="Tilføj Tur" Click="@(() => showAddTurSkabelon = !showAddTurSkabelon)"></RadzenButton>
                </div>

                <br />

                <RadzenButton ButtonType="ButtonType.Submit" Size="ButtonSize.Large" Text="Opret rejseplan skabelon"></RadzenButton>
            </RadzenStack>
        </RadzenTemplateForm>
    }

</div>

@code{

    [Parameter, EditorRequired]
    public List<TurSkabelon> InjectedTurSkabeloner { get; set; } = new List<TurSkabelon>();

    bool showAddTurSkabelon = false;

    private ObservableCollection<TurSkabelon> SelectedTurSkabelonerVar = new ObservableCollection<TurSkabelon>();

    public ObservableCollection<TurSkabelon> ObservableTurSkabeloner
    {
        get
        {
            return SelectedTurSkabelonerVar;
        }
        set 
        { 
            SelectedTurSkabelonerVar = value;
        }
    }

    public RejseplanSkabelon RejseplanSkabelon { get; set; } = new RejseplanSkabelon();

    private List<TurSkabelon> TurSkabelonerVar = new List<TurSkabelon>();

    public List<TurSkabelon> TurSkabeloner
    {
        get
        {
            // Return TurSkabelonerVar excluding entities already in ObservableTurSkabeloner
            return TurSkabelonerVar.Where(d => !ObservableTurSkabeloner.Any(o => o.Id == d.Id)).ToList();
        }
        set
        {
            TurSkabelonerVar = value;
        }
    }

    protected override void OnInitialized()
    {
        TurSkabeloner = InjectedTurSkabeloner;
    }

    async Task OnSubmit(RejseplanSkabelon model)
    {
        //RejseplanSkabelon.Ture = ObservableTurSkabeloner.ToList();

        await AuthStateProvider.RefreshTokenAsync(NavigationManager, NotificationService);

        try
        {
            await CreateRejseplanSkabelon.CreateRejseplanSkabelonAsync(RejseplanSkabelon, AuthStateProvider.CurrentUser.Token);

            NotificationService.Notify(new NotificationMessage()
                {
                    Severity = NotificationSeverity.Success,
                    Summary = "Rejseplan skabelon oprettet",
                    Detail = "Skabelon for rejseplanen blev oprettet.",
                    Duration = 5000
                });

            NavigationManager.NavigateTo("/skabeloner/rejseplan-skabeloner/overview");
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage()
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Fejl",
                    Detail = "Der opstod en fejl under oprettelse af rejseplan skabelon: " + ex.Message,
                    Duration = 5000
                });
        }
    }

    void OnInvalidSubmit(FormInvalidSubmitEventArgs args)
    {

    }

    private void OnTurSkabelonRowSelect(TurSkabelon dagSkabelon)
    {
        ObservableTurSkabeloner.Add(dagSkabelon);

        showAddTurSkabelon = !showAddTurSkabelon;
    }

    private void OnTurSkabelonDelete(TurSkabelon dagSkabelon)
    {
        ObservableTurSkabeloner.Remove(dagSkabelon);
    }
}
