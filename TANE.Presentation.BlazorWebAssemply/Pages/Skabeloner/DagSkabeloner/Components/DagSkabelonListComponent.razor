@using TANE.Application.Groups.DagSkabeloner.Queries.Interfaces
@using TANE.Domain.Entities
@using TANE.Application.Dtos.Skabeloner

<RadzenTextBox @bind-Value="searchText" @oninput=@HandleInput Placeholder="Søg efter titel" Style="width: 100%" />

<RadzenDataGrid AllowFiltering="true" AllowColumnResize="false" AllowAlternatingRows="false" FilterMode="FilterMode.Advanced" AllowSorting="true" PageSize="10" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
Data="@Skabeloner" ColumnWidth="150px" LogicalFilterOperator="LogicalFilterOperator.Or" SelectionMode="DataGridSelectionMode.Single" @bind-Value=@SelectedSkabeloner>
    <Columns>
        <RadzenDataGridColumn Property="@nameof(DagSkabelonReadDto.Id)" Filterable="false" Title="ID" Frozen="true" Width="60px" TextAlign="TextAlign.Left" />
        <RadzenDataGridColumn Property="@nameof(DagSkabelonReadDto.Titel)" Title="Titel" Frozen="false" Width="auto" MinWidth="200px" />
        <RadzenDataGridColumn Context="DagSkabelon" Filterable="false" Sortable="false" Width="auto" TextAlign="TextAlign.Right" Frozen="true" FrozenPosition="FrozenColumnPosition.Right">
            <Template Context="DagSkabelonReadDto">
                @if (OnSelectSkabelon.HasDelegate)
                {
                    <RadzenButton Icon="file_open" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" Shade="Shade.Lighter" class="rz-my-1 rz-ms-1" Click="@(args => SelectRow(DagSkabelonReadDto))" @onclick:stopPropagation="true" />
                }
                @if (OnEditSkabelon.HasDelegate)
                {
                    <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" class="rz-my-1 rz-ms-1" Click="@(args => EditRow(DagSkabelonReadDto))" @onclick:stopPropagation="true" />
                }
                @if (OnDeleteSkabelon.HasDelegate)
                {
                    <RadzenButton Icon="delete" ButtonStyle="ButtonStyle.Danger" Variant="Variant.Flat" Size="ButtonSize.Medium" Shade="Shade.Lighter" class="rz-my-1 rz-ms-1" Click="@(args => DeleteRow(DagSkabelonReadDto))" @onclick:stopPropagation="true" />
                }
            </Template>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>

@code {
    [Parameter, EditorRequired]
    public List<DagSkabelonReadDto> InjectedSkabeloner { get; set; } = new List<DagSkabelonReadDto>();

    [Parameter]
    public EventCallback<DagSkabelonReadDto> OnSelectSkabelon { get; set; }

    [Parameter]
    public EventCallback<DagSkabelonReadDto> OnEditSkabelon { get; set; }

    [Parameter]
    public EventCallback<DagSkabelonReadDto> OnDeleteSkabelon { get; set; }

    bool allowVirtualization = false;

    string searchText = string.Empty;

    private IQueryable<DagSkabelonReadDto> SkabelonerVar = new List<DagSkabelonReadDto>().AsQueryable();

    public IQueryable<DagSkabelonReadDto> Skabeloner
    {
        get 
        {
            if (string.IsNullOrEmpty(searchText))
            {
                return SkabelonerVar;
            }
            else
            {
                return SkabelonerVar.Where(x => x.Titel.ToLower().Contains(searchText.ToLower()));
            }
        }
        set { SkabelonerVar = value; }
    }

    public IList<DagSkabelonReadDto> SelectedSkabeloner { get; set; } = new List<DagSkabelonReadDto>();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        Skabeloner = InjectedSkabeloner.AsQueryable();

        SelectedSkabeloner = new List<DagSkabelonReadDto>() { Skabeloner.FirstOrDefault()! };
    }

    private void HandleInput(ChangeEventArgs args)
    {
        if (args.Value == null)
        {
            searchText = string.Empty;
            return;
        }
        searchText = args.Value.ToString()!;
    }

    async Task SelectRow(DagSkabelonReadDto dagskabelon)
    {
        await OnSelectSkabelon.InvokeAsync(dagskabelon);

        Skabeloner = InjectedSkabeloner.AsQueryable();
    }

    async Task EditRow(DagSkabelonReadDto dagskabelon)
    {
        await OnEditSkabelon.InvokeAsync(dagskabelon);

        Skabeloner = InjectedSkabeloner.AsQueryable();
    }

    async Task DeleteRow(DagSkabelonReadDto dagskabelon)
    {
        await OnDeleteSkabelon.InvokeAsync(dagskabelon);

        Skabeloner = InjectedSkabeloner.AsQueryable();
    }
}