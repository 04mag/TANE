@using TANE.Application.Groups.DagSkabeloner.Queries.Interfaces
@using TANE.Domain.Entities
@using TANE.Application.Dtos.Skabeloner

@if (InjectedSkabeloner.Count > 0)
{
    <RadzenTextBox @bind-Value="searchText" @oninput=@HandleInput Placeholder="Søg efter titel" Style="width: 100%"/>

    <RadzenDataGrid AllowFiltering="true" AllowColumnResize="false" AllowAlternatingRows="false" FilterMode="FilterMode.Advanced" AllowSorting="true" PageSize="10" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
    Data="@Skabeloner" ColumnWidth="150px" LogicalFilterOperator="LogicalFilterOperator.Or" SelectionMode="DataGridSelectionMode.Single" @bind-Value=@SelectedSkabeloner>
        <Columns>
            <RadzenDataGridColumn Property="@nameof(DagSkabelon.Id)" Filterable="false" Title="ID" Frozen="true" Width="60px" TextAlign="TextAlign.Left"/>
            <RadzenDataGridColumn Property="@nameof(DagSkabelon.Titel)" Title="Titel" Frozen="false" Width="auto" MinWidth="200px"/>
            <RadzenDataGridColumn Context="DagSkabelon" Filterable="false" Sortable="false" Width="auto" TextAlign="TextAlign.Right" Frozen="true" FrozenPosition="FrozenColumnPosition.Right">
                <Template Context="DagSkabelon">
                    @if (OnSelect.HasDelegate)
                    {
                        <RadzenButton Icon="file_open" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" Shade="Shade.Lighter" class="rz-my-1 rz-ms-1" Click="@(args => SelectRow(DagSkabelon))" @onclick:stopPropagation="true"/>
                    }
                    @if (OnEdit.HasDelegate)
                    {
                        <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" class="rz-my-1 rz-ms-1" Click="@(args => EditRow(DagSkabelon))" @onclick:stopPropagation="true"/>
                    }
                    @if (OnDelete.HasDelegate)
                    {
                        <RadzenButton Icon="delete" ButtonStyle="ButtonStyle.Danger" Variant="Variant.Flat" Size="ButtonSize.Medium" Shade="Shade.Lighter" class="rz-my-1 rz-ms-1" Click="@(args => DeleteRow(DagSkabelon))" @onclick:stopPropagation="true"/>
                    }
                </Template>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
}
else
{
    <h4>Ingen dag-skabeloner tilgængelige</h4>
}
@code {
    [Parameter, EditorRequired]
    public List<DagSkabelon> InjectedSkabeloner { get; set; } = new List<DagSkabelon>();

    [Parameter]
    public EventCallback<DagSkabelon> OnSelect { get; set; }

    [Parameter]
    public EventCallback<DagSkabelon> OnEdit { get; set; }

    [Parameter]
    public EventCallback<DagSkabelon> OnDelete{ get; set; }

    bool allowVirtualization = false;

    string searchText = string.Empty;

    private IQueryable<DagSkabelon> SkabelonerVar = new List<DagSkabelon>().AsQueryable();

    public IQueryable<DagSkabelon> Skabeloner
    {
        get 
        {
            if (string.IsNullOrEmpty(searchText))
            {
                return SkabelonerVar;
            }
            else
            {
                return SkabelonerVar.Where(x => x.Titel.ToLower().Contains(searchText.ToLower()));
            }
        }
        set { SkabelonerVar = value; }
    }

    public IList<DagSkabelon> SelectedSkabeloner { get; set; } = new List<DagSkabelon>();

    protected override void OnInitialized()
    {
        Skabeloner = InjectedSkabeloner.AsQueryable();

        SelectedSkabeloner = new List<DagSkabelon>() { Skabeloner.FirstOrDefault()! };
    }

    protected override async Task OnParametersSetAsync()
    {
        Skabeloner = InjectedSkabeloner.AsQueryable();

        SelectedSkabeloner = new List<DagSkabelon>() { Skabeloner.FirstOrDefault()! };

        await base.OnParametersSetAsync();
    }

    private void HandleInput(ChangeEventArgs args)
    {
        if (args.Value == null)
        {
            searchText = string.Empty;
            return;
        }
        searchText = args.Value.ToString()!;
    }

    async Task SelectRow(DagSkabelon dagskabelon)
    {
        await OnSelect.InvokeAsync(dagskabelon);

        Skabeloner = InjectedSkabeloner.AsQueryable();
    }

    async Task EditRow(DagSkabelon dagskabelon)
    {
        await OnEdit.InvokeAsync(dagskabelon);

        Skabeloner = InjectedSkabeloner.AsQueryable();
    }

    async Task DeleteRow(DagSkabelon dagskabelon)
    {
        await OnDelete.InvokeAsync(dagskabelon);

        Skabeloner = InjectedSkabeloner.AsQueryable();
    }
}