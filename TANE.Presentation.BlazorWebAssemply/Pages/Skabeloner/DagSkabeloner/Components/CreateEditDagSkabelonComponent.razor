@using TANE.Application.Groups.DagSkabeloner.Commands.Interfaces
@using TANE.Application.Groups.DagSkabeloner.Queries.Interfaces
@using TANE.Domain.Entities
@using TANE.Persistence.Repositories
@using TANE.Presentation.BlazorWebAssemply.Configuration
@using TANE.Application.Dtos.Skabeloner
@using TANE.Application.RepositoryInterfaces
@inject CustomStateProvider AuthStateProvider
@inject NavigationManager NavigationManager
@inject NotificationService NotificationService
@inject ICreateDagSkabelon CreateDagSkabelon
@inject IReadDagSkabelon ReadDagSkabelon
@inject IUpdateDagSkabelon UpdateDagSkabelon

@if (Skabelon != null)
{
    <div class="rz-p-0 rz-p-md-12">
        <RadzenTemplateForm TItem="DagSkabelon" Data=@Skabelon Submit=@OnSubmit InvalidSubmit=@OnInvalidSubmit>
            <RadzenStack Gap="1rem" class="rz-p-sm-12">

                @if (Id != 0)
                {
                    <!-- Id -->
                    <RadzenFormField Text="ID" Variant="@ThemeConfig.FormVariant">
                        <ChildContent>
                            <RadzenNumeric Name="Id" @bind-Value=@Skabelon.Id Style="width: 100%" Disabled="true" />
                        </ChildContent>
                    </RadzenFormField>
                }

                <RadzenFormField Text="Titel" Variant="@ThemeConfig.FormVariant">
                    <ChildContent>
                        <RadzenTextBox Name="Titel" @bind-Value=@Skabelon.Titel />
                    </ChildContent>
                    <Helper>
                        <RadzenRequiredValidator Component="Titel" Text="Titel skal udfyldes." />
                    </Helper>
                </RadzenFormField>

                <RadzenFormField Text="Beskrivelse" Variant="@ThemeConfig.FormVariant">
                    <ChildContent>
                        <RadzenTextArea Name="Beskrivelse" @bind-Value="@Skabelon.Beskrivelse" Rows="4" />
                    </ChildContent>
                    <Helper>
                        <RadzenRequiredValidator Component="Beskrivelse" Text="Beskrivelse skal udfyldes." />
                    </Helper>
                </RadzenFormField>

                <RadzenFormField Text="Aktiviteter" Variant="@ThemeConfig.FormVariant">
                    <ChildContent>
                        <RadzenTextArea Name="Aktiviteter" @bind-Value="@Skabelon.Aktiviteter" Rows="4" />
                    </ChildContent>
                    <Helper>
                        <RadzenRequiredValidator Component="Aktiviteter" Text="Aktiviteter skal udfyldes." />
                    </Helper>
                </RadzenFormField>

                <RadzenFormField Text="Måltider" Variant="@ThemeConfig.FormVariant">
                    <ChildContent>
                        <RadzenTextArea Name="Måltider" @bind-Value="@Skabelon.Måltider" Rows="4" />
                    </ChildContent>
                </RadzenFormField>

                <RadzenFormField Text="Overnatning" Variant="@ThemeConfig.FormVariant">
                    <ChildContent>
                        <RadzenTextBox Name="Overnatning" @bind-Value=@Skabelon.Overnatning />
                    </ChildContent>
                </RadzenFormField>


                <RadzenButton ButtonType="ButtonType.Submit" Text="@SaveButtonText"></RadzenButton>
            </RadzenStack>
        </RadzenTemplateForm>
    </div>
}
else
{
    <h4>Skabelon kunne ikke indlæses</h4>
}

@code {
    [Parameter]
    public EventCallback<DagSkabelon> ReturnObjectOnSubmit { get; set; }

    public DagSkabelon? Skabelon { get; set; } = new DagSkabelon();

    [Parameter]
    public int Id { get; set; } = 0;

    private string saveButtonTextVar = "Gem skabelon";

    public string SaveButtonText
    {
        get { return saveButtonTextVar; }
        set { saveButtonTextVar = value; }
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Id == 0)
        {
            Skabelon = new DagSkabelon();

            SaveButtonText = "Opret skabelon";
        }
        else
        {
            await AuthStateProvider.RefreshTokenAsync(NavigationManager, NotificationService);

            try
            {
                Skabelon = await ReadDagSkabelon.ReadDagSkabelonByIdAsync(Id, AuthStateProvider.CurrentUser.Token);

                if (Skabelon.Id == 0)
                {
                    Skabelon = null;
                }
            }
            catch
            {
                NotificationService.Notify(new NotificationMessage()
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Fejl",
                    Detail = "Der opstod en fejl under hentning af skabelon.",
                    Duration = 5000
                });

                Skabelon = null;
            }
        }

        await base.OnParametersSetAsync();
    }

    void OnInvalidSubmit()
    {

    }

    async Task OnSubmit()
    {
        await AuthStateProvider.RefreshTokenAsync(NavigationManager, NotificationService);

        if (Skabelon!.Id == 0)
        {
            try
            {
                var result = await CreateDagSkabelon.CreateDagSkabelonAsync(Skabelon, AuthStateProvider.CurrentUser.Token);

                NotificationService.Notify(new NotificationMessage()
                {
                    Severity = NotificationSeverity.Success,
                    Summary = "Oprettet",
                    Detail = "Dag skabelon er oprettet.",
                    Duration = 5000
                });

                if (ReturnObjectOnSubmit.HasDelegate)
                {
                    await ReturnObjectOnSubmit.InvokeAsync(result);
                }
                else
                {
                    NavigationManager.NavigateTo("/skabeloner/dag");
                }
            }
            catch (Exception ex)
            {
                NotificationService.Notify(new NotificationMessage()
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Fejl ved oprettelse",
                    Detail = ex.Message,
                    Duration = 5000
                });
            }
        }
        else
        {
            try
            {
                var result = await UpdateDagSkabelon.UpdateDagSkabelonAsync(Skabelon, AuthStateProvider.CurrentUser.Token);
                NotificationService.Notify(new NotificationMessage()
                {
                    Severity = NotificationSeverity.Success,
                    Summary = "Opdateret",
                    Detail = "Dag skabelon er opdateret.",
                    Duration = 5000
                });
                if (ReturnObjectOnSubmit.HasDelegate)
                {
                    await ReturnObjectOnSubmit.InvokeAsync(result);
                }
                else
                {
                    NavigationManager.NavigateTo("/skabeloner/dag");
                }
            }
            catch (Exception ex)
            {
                NotificationService.Notify(new NotificationMessage()
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Fejl ved opdatering",
                    Detail = ex.Message,
                    Duration = 5000
                });
            }
        }
    }
}

