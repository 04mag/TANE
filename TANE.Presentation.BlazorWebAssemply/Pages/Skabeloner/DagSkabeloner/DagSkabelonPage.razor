@using TANE.Application.Groups.DagSkabeloner.Commands.Interfaces
@using TANE.Application.Groups.DagSkabeloner.Queries
@using TANE.Application.Groups.DagSkabeloner.Queries.Interfaces
@using TANE.Domain.Entities
@using TANE.Presentation.BlazorWebAssemply.Pages.Skabeloner.DagSkabeloner.Components
@using TANE.Application.Dtos.Skabeloner

@inject IReadDagSkabelon ReadDagSkabelon
@inject IDeleteDagSkabelon DeleteDagSkabelon
@inject DialogService DialogService
@inject CustomStateProvider AuthStateProvider
@inject NavigationManager NavigationManager
@inject NotificationService NotificationService

@page "/skabeloner/dag"

<AuthorizeView>
    <Authorized>
        <PageTitle>Dag Skabeloner</PageTitle>
        <h3>Dag Skabeloner</h3>

        <div class="rz-p-0 rz-p-md-12">
            <div style="display:flex; justify-content:flex-end; margin-bottom:1rem;">
                <RadzenButton ButtonType="ButtonType.Button"
                              Size="ButtonSize.Large"
                              Text="Opret ny dag skabelon"
                              Click="@(() => NavigationManager.NavigateTo("skabeloner/dag/create"))" />
            </div>
        </div>

        <DagSkabelonListComponent InjectedSkabeloner="DagSkabeloner" OnEdit="OnRowEditPressed" OnDelete="OnRowDeletePressed" />
    </Authorized>
    <NotAuthorized>
        <PageTitle>Adgang nægtet</PageTitle>
        <h3>Adgang nægtet</h3>
        <p>Du har ikke adgang til denne side.</p>
    </NotAuthorized>
</AuthorizeView>


@code {
    public List<DagSkabelon> DagSkabeloner { get; set; } = new List<DagSkabelon>();

    private void OnRowEditPressed(DagSkabelon dagSkabelon)
    {
        NavigationManager.NavigateTo($"skabeloner/dag/edit/{dagSkabelon.Id}");
    }

    private async Task OnRowDeletePressed(DagSkabelon dagSkabelon)
    {
        var result = await DialogService.Confirm($"Er du sikker på, at du vil slette dag skabelon med ID: {dagSkabelon.Id}?", "Bekræft sletning", new ConfirmOptions() { OkButtonText = "Ja", CancelButtonText = "Nej" });
        if (result == true)
        {
            await AuthStateProvider.RefreshTokenAsync(NavigationManager, NotificationService);

            // Call the delete method here
            var deleteResult = await DeleteDagSkabelon.DeleteDagSkabelonAsync(dagSkabelon.Id, AuthStateProvider.CurrentUser.Token);
            if (deleteResult)
            {
                DagSkabeloner.Remove(dagSkabelon);
                NotificationService.Notify(NotificationSeverity.Success, "Sletning", $"Dag skabelon med ID: {dagSkabelon.Id} er blevet slettet.");
            }
            else
            {
                NotificationService.Notify(NotificationSeverity.Error, "Sletning", $"Sletning af dag skabelon med ID: {dagSkabelon.Id} mislykkedes.");
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {

        await AuthStateProvider.RefreshTokenAsync(NavigationManager, NotificationService);

        try
        {
            DagSkabeloner = await ReadDagSkabelon.ReadAllDagSkabelonerAsync(AuthStateProvider.CurrentUser.Token);
        }
        catch
        {
            NotificationService.Notify(NotificationSeverity.Error, "Fejl", "Kunne ikke hente skabeloner.");
        }

        await base.OnInitializedAsync();
    }
}
