@using TANE.Application.Groups.TurSkabeloner.Queries.Interfaces
@using TANE.Application.RepositoryInterfaces
@using TANE.Domain.Entities
@using TANE.Presentation.BlazorWebAssemply.Pages.Ture.Components
@using TANE.Application.Dtos.Skabeloner
@using TANE.Application.Dtos
@using TANE.Presentation.BlazorWebAssemply.Pages.Dage.Components
@inject ITurSkabelonRepository TurSkabelonRepository
@inject CustomStateProvider AuthStateProvider
@inject DialogService DialogService
@page "/turskabeloner"




    <RadzenTextBox @bind-Value="searchText" @oninput=@HandleInput Placeholder="Søg efter titel" Style="width: 100%" />
    <RadzenDataGrid AllowFiltering="true" AllowColumnResize="false" AllowAlternatingRows="false" FilterMode="FilterMode.Advanced" AllowSorting="true" PageSize="10" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
                    Data="@Skabeloner" ColumnWidth="150px" LogicalFilterOperator="LogicalFilterOperator.Or" SelectionMode="DataGridSelectionMode.Single" @bind-Value=@SelectedSkabeloner>
        <Columns>
            <RadzenDataGridColumn Property="@nameof(TurSkabelon.Id)" Filterable="false" Title="ID" Frozen="true" Width="60px" TextAlign="TextAlign.Left"/>
            <RadzenDataGridColumn Property="@nameof(TurSkabelon.Titel)" Title="Titel" Frozen="false" Width="auto" MinWidth="200px"/>
            <RadzenDataGridColumn Property="@nameof(TurSkabelon.Beskrivelse)" Title="Beskrivelse" Width="auto" MinWidth="150px"/>
            <RadzenDataGridColumn Context="TurSkabelon" Filterable="false" Sortable="false" Width="auto" TextAlign="TextAlign.Right" Frozen="true" FrozenPosition="FrozenColumnPosition.Right">
                <Template Context="TurSkabelon">
                    @if (OnSelect.HasDelegate)
                    {
                        <RadzenButton Icon="file_open" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" Shade="Shade.Lighter" class="rz-my-1 rz-ms-1" Click="@(args => SelectRow(TurSkabelon))" @onclick:stopPropagation="true"/>
                    }
                    @if (OnEdit.HasDelegate)
                    {
                        <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" class="rz-my-1 rz-ms-1" Click="@(args => EditRow(TurSkabelon))" @onclick:stopPropagation="true"/>
                    }
                    @if (OnDelete.HasDelegate)
                    {
                        <RadzenButton Icon="delete" ButtonStyle="ButtonStyle.Danger" Variant="Variant.Flat" Size="ButtonSize.Medium" Shade="Shade.Lighter" class="rz-my-1 rz-ms-1" Click="@(args => DeleteRow(TurSkabelon))" @onclick:stopPropagation="true"/>
                    }
                </Template>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>


@* @if (showNewTur)
{
    <RadzenButton Text="Opret Tur" ButtonType="ButtonType.Button" Click="OpenCreateTurDialog" />
} *@

@*Knap til tilføjelse af ny tur*@
@* <div style="display:flex; justify-content:flex-end;">
    <RadzenButton ButtonType="ButtonType.Button"
                  Style="width:40px; background-color:green;"
                  Size="ButtonSize.Small"
                  Icon="add"
                  Click="OpenCreateTurDialog" />
</div> *@

@code {
    [Parameter] public EventCallback<Tur> OnCreateTur { get; set; }

    private bool showNewTur = false;

    private string _token;

    [Parameter, EditorRequired]
    public List<TurSkabelon> InjectedSkabeloner { get; set; }

    [Parameter]
    public EventCallback<TurSkabelon> OnSelect { get; set; }

    [Parameter]
    public EventCallback<TurSkabelon> OnEdit { get; set; }

    [Parameter]
    public EventCallback<TurSkabelon> OnDelete { get; set; }

    private bool allowVirtualization = false;

    private string searchText = string.Empty;

    private List<TurSkabelon> SkabelonerVar = new List<TurSkabelon>();

    public List<TurSkabelon> Skabeloner
    {
        get
        {
            if (string.IsNullOrEmpty(searchText))
            {
                return SkabelonerVar;
            }
            else
            {
                return SkabelonerVar.Where(x => x.Titel.ToLower().Contains(searchText.ToLower())).ToList();
            }
        }
        set { SkabelonerVar = value; }
    }

    public IList<TurSkabelon> SelectedSkabeloner { get; set; } = new List<TurSkabelon>();

    protected override async Task OnInitializedAsync()
    {
        var state = await AuthStateProvider.GetAuthenticationStateAsync();
        _token = AuthStateProvider.CurrentUser.Token;
        await base.OnInitializedAsync();

        Skabeloner = await TurSkabelonRepository.ReadAllTurSkabeloner(_token);

        SelectedSkabeloner = new List<TurSkabelon>() { Skabeloner.FirstOrDefault()! };
    }

    private void HandleInput(ChangeEventArgs args)
    {
        if (args.Value == null)
        {
            searchText = string.Empty;
            return;
        }
        searchText = args.Value.ToString()!;
    }

    async Task SelectRow(TurSkabelon turskabelon)
    {
        await OnSelect.InvokeAsync(turskabelon);

        Skabeloner = InjectedSkabeloner;
    }

    async Task EditRow(TurSkabelon turskabelon)
    {
        await OnEdit.InvokeAsync(turskabelon);

        Skabeloner = InjectedSkabeloner;
    }

    async Task DeleteRow(TurSkabelon turskabelon)
    {
        await OnDelete.InvokeAsync(turskabelon);

        Skabeloner = InjectedSkabeloner;
    }

    async Task HandleSubmitNewTur(Tur tur)
	{
		showNewTur = false;
        await OnCreateTur.InvokeAsync(tur);
	}

    private async Task OpenCreateTurDialog()
    {
        var parameters = new Dictionary<string, object>
        {
            { "OnAdd", EventCallback.Factory.Create<Tur>(this, HandleSubmitNewTur) }
        };

    // Åbner CreateDagComponent i en dialog
        var result = await DialogService.OpenAsync<CreateTurComponent>("Opret Ny Tur", parameters);
    }
}