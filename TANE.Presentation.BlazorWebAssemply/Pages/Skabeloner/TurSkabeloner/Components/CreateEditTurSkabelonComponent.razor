@using System.Collections.ObjectModel
@using TANE.Application.Groups.DagSkabeloner.Commands
@using TANE.Application.Groups.DagSkabeloner.Commands.Interfaces
@using TANE.Application.Groups.DagSkabeloner.Queries.Interfaces
@using TANE.Application.Groups.TurSkabeloner.Commands
@using TANE.Application.Groups.TurSkabeloner.Commands.Interfaces
@using TANE.Application.Groups.TurSkabeloner.Queries.Interfaces
@using TANE.Domain.Entities
@using TANE.Presentation.BlazorWebAssemply.Configuration
@using TANE.Presentation.BlazorWebAssemply.Pages.Skabeloner.DagSkabeloner.Components

@inject CustomStateProvider AuthStateProvider
@inject NavigationManager NavigationManager
@inject NotificationService NotificationService
@inject DialogService DialogService
@inject IReadTurSkabelon ReadTurSkabelon
@inject IReadDagSkabelon ReadDagSkabelon
@inject ICreateTurSkabelon CreateTurSkabelon
@inject IUpdateTurSkabelon UpdateTurSkabelon
@inject ICreateDagSkabelon CreateDagSkabelon

@if (TurSkabelon != null)
{
    <div class="rz-p-0 rz-p-md-12">
        <!-- Flex-container med 100% bredde -->
        <RadzenTemplateForm TItem="TurSkabelon" Data=@TurSkabelon Submit=@OnSubmit InvalidSubmit=@OnInvalidSubmit>
            <RadzenStack Gap="1rem" class="rz-p-sm-12">


                @if (Id != 0)
                {
                    <!-- Id -->
                    <RadzenFormField Text="ID" Variant="@ThemeConfig.FormVariant">
                        <ChildContent>
                            <RadzenNumeric Name="Id" @bind-Value=@TurSkabelon.Id Style="width: 100%" Disabled="true" />
                        </ChildContent>
                    </RadzenFormField>
                }

                <!-- Titel -->
                <RadzenFormField Text="Titel" Variant="@ThemeConfig.FormVariant">
                    <ChildContent>
                        <RadzenTextBox Name="Titel" @bind-Value=@TurSkabelon.Titel Style="width: 100%" />
                    </ChildContent>
                    <Helper>
                        <RadzenRequiredValidator Component="Titel" Text="Titel skal udfyldes." />
                    </Helper>
                </RadzenFormField>

                <!-- Beskrivelse -->
                <RadzenFormField Text="Beskrivelse" Variant="@ThemeConfig.FormVariant">
                    <ChildContent>
                        <RadzenTextArea Name="Beskrivelse" @bind-Value=@TurSkabelon.Beskrivelse Rows="4" Style="width: 100%" />
                    </ChildContent>
                    <Helper>
                        <RadzenRequiredValidator Component="Beskrivelse" Text="Beskrivelse skal udfyldes." />
                    </Helper>
                </RadzenFormField>

                <RadzenFormField Text="Pris" Variant="@ThemeConfig.FormVariant">
                    <ChildContent>
                        <RadzenNumeric Name="Pris" @bind-Value=@TurSkabelon.Pris Style="width: 100%" />
                    </ChildContent>
                </RadzenFormField>



                <h3>Dage:</h3>
                <DagSkabelonReorderListComponent InjectedDagSkabeloner="ObservableDage" OnDelete="OnDagSkabelonDelete" />
                <div style="text-align: right; width: 100%;">
                    <RadzenButton ButtonType="ButtonType.Button" Style="width: auto" Text="Tilføj eksisterende dag" Click="OpenSelectDagSkabelonDialog"></RadzenButton>
                    <RadzenButton ButtonType="ButtonType.Button" Style="width: auto" Text="Opret ny dag" Click="OpenCreateDagSkabelonDialog"></RadzenButton>
                </div>

                <br />

                <RadzenButton ButtonType="ButtonType.Submit"
                              Text="@SaveButtonText" />

            </RadzenStack>
        </RadzenTemplateForm>
    </div>
}
else
{
    <h4>Skabelon kunne ikke indlæses</h4>
}

@code {
    public EventCallback<TurSkabelon> ReturnObjectOnSubmit { get; set; }

    public TurSkabelon? TurSkabelon { get; set; } = new TurSkabelon();

    public List<DagSkabelon> DagSkabeloner { get; set; } = new List<DagSkabelon>();

    public ObservableCollection<DagSkabelon> ObservableDage { get; set; } = new();

    [Parameter]
    public int Id { get; set; } = 0;

    private string saveButtonTextVar = "Gem skabelon";

    public string SaveButtonText
    {
        get { return saveButtonTextVar; }
        set { saveButtonTextVar = value; }
    }

    protected override async Task OnInitializedAsync()
    {
        await AuthStateProvider.RefreshTokenAsync(NavigationManager, NotificationService);

        DagSkabeloner = await ReadDagSkabelon.ReadAllDagSkabelonerAsync(AuthStateProvider.CurrentUser.Token);

        await base.OnInitializedAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Id == 0)
        {
            TurSkabelon = new TurSkabelon();

            SaveButtonText = "Opret skabelon";
        }
        else
        {
            await AuthStateProvider.RefreshTokenAsync(NavigationManager, NotificationService);

            try
            {
                TurSkabelon = await ReadTurSkabelon.ReadTurSkabelonByIdAsync(Id, AuthStateProvider.CurrentUser.Token);

                ObservableDage = new ObservableCollection<DagSkabelon>();

                foreach (var dagTurSkabelon in TurSkabelon.DagTurSkabelon)
                {
                    ObservableDage.Add(dagTurSkabelon.DagSkabelon!);
                }

                if (TurSkabelon.Id == 0)
                {
                    TurSkabelon = null;
                }
            }
            catch
            {
                NotificationService.Notify(new NotificationMessage()
                    {
                        Severity = NotificationSeverity.Error,
                        Summary = "Fejl",
                        Detail = "Der opstod en fejl under hentning af skabelon.",
                        Duration = 5000
                    });

                TurSkabelon = null;
            }
        }

        await base.OnParametersSetAsync();
    }

    async Task OnSubmit()
    {
        TurSkabelon!.DagTurSkabelon = new List<DagTurSkabelon>();

        //Tilføjer dage til listen
        foreach (var dagSkabelon in ObservableDage)
        {
            DagTurSkabelon dagTurSkabelon = new DagTurSkabelon()
                {
                    DagSkabelonId = dagSkabelon.Id,
                    DagSkabelon = dagSkabelon,
                    TurSkabelonId = TurSkabelon.Id
                };

            TurSkabelon.DagTurSkabelon.Add(dagTurSkabelon);
        }

        if (TurSkabelon!.Id == 0)
        {
            try
            {
                var result = await CreateTurSkabelon.CreateTurSkabelonAsync(TurSkabelon, AuthStateProvider.CurrentUser.Token);
                NotificationService.Notify(new NotificationMessage()
                    {
                        Severity = NotificationSeverity.Success,
                        Summary = "Oprettet",
                        Detail = "Tur skabelon oprettet",
                        Duration = 5000
                    });

                if (ReturnObjectOnSubmit.HasDelegate)
                {
                    await ReturnObjectOnSubmit.InvokeAsync(result);
                }
                else
                {
                    NavigationManager.NavigateTo("/skabeloner/tur");
                }
            }
            catch (Exception ex)
            {
                NotificationService.Notify(new NotificationMessage()
                    {
                        Severity = NotificationSeverity.Error,
                        Summary = "Fejl ved oprettelse",
                        Detail = ex.Message,
                        Duration = 5000
                    });
            }
        }
        else
        {
            try
            {
                var result = await UpdateTurSkabelon.UpdateTurSkabelonAsync(TurSkabelon, AuthStateProvider.CurrentUser.Token);
                NotificationService.Notify(new NotificationMessage()
                    {
                        Severity = NotificationSeverity.Success,
                        Summary = "Opdateret",
                        Detail = "Tur skabelon opdateret",
                        Duration = 5000
                    });
                if (ReturnObjectOnSubmit.HasDelegate)
                {
                    await ReturnObjectOnSubmit.InvokeAsync(result);
                }
                else
                {
                    NavigationManager.NavigateTo("/skabeloner/tur");
                }
            }
            catch (Exception ex)
            {
                NotificationService.Notify(new NotificationMessage()
                    {
                        Severity = NotificationSeverity.Error,
                        Summary = "Fejl ved opdatering",
                        Detail = ex.Message,
                        Duration = 5000
                    });
            }
        }

    }

    void OnInvalidSubmit(FormInvalidSubmitEventArgs args)
    {

    }

    void OnDagSkabelonDelete(DagSkabelon dagSkabelon)
    {
        ObservableDage.Remove(dagSkabelon);
    }

    private void OnDagSkabelonAdd(DagSkabelon dagSkabelon)
    {
        ObservableDage.Add(dagSkabelon);

        DialogService.Close(dagSkabelon);
    }

    private void OnDagSelected(DagSkabelon dagSkabelon)
    {
        ObservableDage.Add(dagSkabelon);

        DialogService.Close(dagSkabelon);
    }

    private async Task OpenCreateDagSkabelonDialog()
    {
        var parameters = new Dictionary<string, object>
        {
            { "ReturnObjectOnSubmit", EventCallback.Factory.Create<DagSkabelon>(this, OnDagSkabelonAdd) }
        };

        // Åbner CreateDagSkabelonComponent i en dialog
        var result = await DialogService.OpenAsync<CreateDagSkabelonComponent>("Opret ny dag skabelon", parameters);
    }

    private async Task OpenSelectDagSkabelonDialog()
    {
        var parameters = new Dictionary<string, object>
        {
            { "OnSelect", EventCallback.Factory.Create<DagSkabelon>(this, OnDagSelected) },
            { "InjectedSkabeloner", DagSkabeloner.Where(d => !ObservableDage.Any(o => o.Id == d.Id)).ToList() }
        };

        // Åbner CreateDagSkabelonComponent i en dialog
        var result = await DialogService.OpenAsync<DagSkabelonListComponent>("Vælg eksisterende dag skabelon", parameters);
    }
}
