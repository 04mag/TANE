@using System.Collections.ObjectModel
@using Microsoft.JSInterop
@using TANE.Application.Dtos
@using TANE.Domain.Entities
@inject IJSRuntime JSRuntime;

<style>
    .my-class td {
        border-top: 1px solid black;
        border-bottom: 1px solid black;
    }
</style>

<RadzenDataGrid AllowFiltering="false" AllowColumnResize="false" AllowAlternatingRows="false" FilterMode="FilterMode.Advanced" AllowSorting="false" PageSize="5" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
                Data="@InjectedTure" ColumnWidth="150px" LogicalFilterOperator="LogicalFilterOperator.Or" SelectionMode="DataGridSelectionMode.Single"
                @bind-Value=@selectedTure RowRender="@RowRender">
    <Columns>
        <RadzenDataGridColumn Property="@nameof(TurReadDto.Id)" Filterable="false" Title="ID" Frozen="true" Width="60px" TextAlign="TextAlign.Left" />
        <RadzenDataGridColumn Property="@nameof(TurReadDto.Titel)" Title="Titel" Frozen="false" Width="auto" MinWidth="200px" />
        <RadzenDataGridColumn Property="@nameof(TurReadDto.Beskrivelse)" Title="Beskrivelse" Width="auto" MinWidth="150px" />
        <RadzenDataGridColumn Context="Tur" Filterable="false" Sortable="false" Width="auto" TextAlign="TextAlign.Right" Frozen="true" FrozenPosition="FrozenColumnPosition.Right">
            <Template Context="Tur">
                @if (OnSelect.HasDelegate)
                {
                    <RadzenButton Icon="file_open" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" Shade="Shade.Lighter" class="rz-my-1 rz-ms-1" Click="@(args => SelectRow(Tur))" @onclick:stopPropagation="true" />
                }
                @if (OnEdit.HasDelegate)
                {
                    <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" class="rz-my-1 rz-ms-1" Click="@(args => EditRow(Tur))" @onclick:stopPropagation="true" />
                }
                @if (OnDelete.HasDelegate)
                {
                    <RadzenButton Icon="delete" ButtonStyle="ButtonStyle.Danger" Variant="Variant.Flat" Size="ButtonSize.Medium" Shade="Shade.Lighter" class="rz-my-1 rz-ms-1" Click="@(args => DeleteRow(Tur))" @onclick:stopPropagation="true" />
                }
            </Template>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>

@code {
    [Parameter, EditorRequired]
    public ObservableCollection<TurReadDto> InjectedTure { get; set; }

    [Parameter]
    public EventCallback<TurReadDto> OnSelect { get; set; }

    [Parameter]
    public EventCallback<TurReadDto> OnEdit { get; set; }

    [Parameter]
    public EventCallback<TurReadDto> OnDelete { get; set; }

    IList<TurReadDto> selectedTure;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        selectedTure = new List<TurReadDto>() { InjectedTure.FirstOrDefault() };
    }

    TurReadDto draggedItem;

    async Task SelectRow(TurReadDto tur)
    {
        await OnSelect.InvokeAsync(tur);
    }

    async Task EditRow(TurReadDto tur)
    {
        await OnEdit.InvokeAsync(tur);
    }

    async Task DeleteRow(TurReadDto tur)
    {
        await OnDelete.InvokeAsync(tur);
    }

    void RowRender(RowRenderEventArgs<TurReadDto> args)
    {
        args.Attributes.Add("title", "Drag row to reorder");
        args.Attributes.Add("style", "cursor:grab");
        args.Attributes.Add("draggable", "true");
        args.Attributes.Add("ondragover", "event.preventDefault();event.target.closest('.rz-data-row').classList.add('my-class')");
        args.Attributes.Add("ondragleave", "event.target.closest('.rz-data-row').classList.remove('my-class')");
        args.Attributes.Add("ondragstart", EventCallback.Factory.Create<DragEventArgs>(this, () => draggedItem = args.Data));
        args.Attributes.Add("ondrop", EventCallback.Factory.Create<DragEventArgs>(this, (Action)(() =>
        {
            var draggedIndex = this.InjectedTure.IndexOf(draggedItem);
            var droppedIndex = this.InjectedTure.IndexOf(args.Data);
            this.InjectedTure.Remove(draggedItem);
            this.InjectedTure.Insert((int)(draggedIndex <= droppedIndex ? droppedIndex++ : droppedIndex), draggedItem);

            JSRuntime.InvokeVoidAsync("eval", $"document.querySelector('.my-class').classList.remove('my-class')");
        })));
    }
}