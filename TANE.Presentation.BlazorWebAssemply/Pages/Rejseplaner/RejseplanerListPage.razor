@page "/rejseplaner"
@using TANE.Application.Dtos
@using TANE.Application.Groups.Rejseplaner.Queries.Interfaces
@using TANE.Application.RepositoryInterfaces
@using TANE.Domain.Entities
@using TANE.Presentation.BlazorWebAssemply.Pages.Rejseplaner.Components
@inject IReadRejseplan ReadRejseplan
@inject CustomStateProvider AuthStateProvider
@inject IRejseplanRepository RejseplanRepository
@inject Radzen.DialogService DialogService
@inject NavigationManager NavigationManager

<h3>Rejseplaner</h3>

<RadzenButton Icon="add_circle"
              Style="margin-bottom:10px"
              Text="Ny Rejseplan"
              Click="CreateNew" />

<RejseplanListComponent Data="AlleRejseplaner" OnEdit="BeginEdit" OnSelect="OnSelct" />

@code {
    private List<Rejseplan> AlleRejseplaner = new();
    private Rejseplan SelectedRejseplan = default!;
    private string _token = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        var state = await AuthStateProvider.GetAuthenticationStateAsync();
        _token = AuthStateProvider.CurrentUser.Token;
        AlleRejseplaner = (await ReadRejseplan.ReadRejseplanerAsync(_token)).ToList();
    }

    async void CreateNew()
    {

        var parameters = new Dictionary<string, object>()
        {
            { "InjectedTure", AlleRejseplaner },
            {"OnCreate", HandleCreate}
        };

        var result = await DialogService.OpenAsync<CreateRejseplanComponent>(
            title: "Ny rejseplan",

            options: new DialogOptions {   
                Width      = "80vw",       // 80% af viewport‐bredden
                Height     = "90vh",       // 90% af viewport‐højden
                Resizable  = true,         // kan trækkes i hjørner for at ændre størrelse
                Draggable  = true,         // kan flyttes rundt
            } 
            );
        if (result is Rejseplan nyPlan)
        {
            await RejseplanRepository.CreateRejseplan(nyPlan, _token);
            AlleRejseplaner = (await ReadRejseplan.ReadRejseplanerAsync(_token)).ToList();
            StateHasChanged();

        }

    }

    void HandleCreate(Rejseplan rejseplan)
    {
        DialogService.Close();
    }

    void BeginEdit(Rejseplan plan)
    {
        SelectedRejseplan = plan;
        OpenEditDialog(plan);
    }

    void OnSelct(Rejseplan plan)
    {
        NavigationManager.NavigateTo($"/rejseplaner/overview/{plan.Id}");
    }

    async void OpenEditDialog(Rejseplan plan)
    {
        var result = await DialogService.OpenAsync<EditRejseplanComponent>(
            title: plan.Id == 0 ? "Ny rejseplan" : "Rediger rejseplan",
            parameters: new Dictionary<string, object> {
                ["Item"]      = plan,
                ["currentId"] = plan.Id
            },
            options: new DialogOptions {   
                Width      = "80vw",       // 80% af viewport‐bredden
                Height     = "90vh",       // 90% af viewport‐højden
                Resizable  = true,         // kan trækkes i hjørner for at ændre størrelse
                Draggable  = true,         // kan flyttes rundt
            } 
        );

        // Når dialogen lukkes, returnerer vi evt. den opdaterede DTO
        if (result is Rejseplan dto)
        {
            await SaveEdit(dto);
            StateHasChanged();  // Genrend listen
        }
    }

    async Task SaveEdit(Rejseplan dto)
    {
        dto.RowVersion = SelectedRejseplan.RowVersion;
        await RejseplanRepository.UpdateRejseplan(dto.Id, dto, _token);

        var idx = AlleRejseplaner.FindIndex(r => r.Id == dto.Id);
        if (idx >= 0)
        {
            AlleRejseplaner[idx] = new Rejseplan
            {
                Id               = dto.Id,
                KundeId          = dto.KundeId,
                Titel            = dto.Titel,
                Beskrivelse      = dto.Beskrivelse,
                AntalVoksne      = dto.AntalVoksne,
                AntalBørn        = dto.AntalBørn,
                Lufthavn         = dto.Lufthavn,
                FlyPris          = dto.FlyPris,
                AntalDage        = dto.AntalDage,
                AfrejseTidspunkt = dto.AfrejseTidspunkt,
                RowVersion       = dto.RowVersion,
            };
        }
    }
}
