@using TANE.Application.Common.Exceptions
@using TANE.Application.Groups.JwtTokens.Commands.Interfaces
@using TANE.Domain.Entities
@using TANE.Presentation.BlazorWebAssemply.Helpers
@inject IUserLogin _UserLogin
@inject NavigationManager _NavigationManager
@inject Blazored.LocalStorage.ILocalStorageService _LocalStorage

@page "/login"

<h3>Login</h3>

<RadzenCard class="rz-my-12 rz-mx-auto rz-p-4 rz-p-md-12" style="max-width: 600px;">

    <RadzenTemplateForm Data=@("SimpleLogin")>
        <RadzenLogin AllowRegister="false" AllowResetPassword="false" Login="@(args => OnLogin(args))"/>
        <RadzenText>@ErrorMessage</RadzenText>
    </RadzenTemplateForm>

</RadzenCard>

@code {
    public string ErrorMessage { get; set; } = string.Empty;

    private async Task OnLogin(LoginArgs args)
    {
        try
        {
            var jwtToken = await _UserLogin.LoginAsync(args.Username, args.Password);

            LocalStorageHandler localStorageHandler = new LocalStorageHandler(_LocalStorage);

            // Store the JWT token in local storage
            await localStorageHandler.SetTokenAsync(jwtToken.Token);
            await localStorageHandler.SetRefreshTokenAsync(jwtToken.RefreshToken);
            await localStorageHandler.SetTokenExpirationAsync(jwtToken.Expiration.ToString());

            _NavigationManager.NavigateTo("/", true);
        }
        catch (NotAuthorizedException ex)
        {
            ErrorMessage = ex.Message;
        }
        catch (Exception ex)
        {
            ErrorMessage = ex.Message;
        }
    }
}
