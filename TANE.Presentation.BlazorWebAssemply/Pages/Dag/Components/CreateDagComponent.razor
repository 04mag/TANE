@using TANE.Rejseplan.Application.Dtos
@using System.Collections.ObjectModel
@using System.Security.Cryptography
@using TANE.Application.RepositoryInterfaces
@using TANE.Domain.Entities
@using TANE.Presentation.BlazorWebAssemply.Configuration


@inject CustomStateProvider AuthStateProvider


    <div class="rz-p-0 rz-p-md-12">
            <h4>Opret Ny Dag</h4>
            <RadzenTemplateForm TItem="DagCreateDto" Data=@Dag Submit=@OnSubmit InvalidSubmit=@OnInvalidSubmit>
                <RadzenStack Gap="1rem" class="rz-p-sm-12">

                    <RadzenFormField Text="Titel" Variant="@ThemeConfig.FormVariant">
                        <ChildContent>
                            <RadzenTextBox Name="Titel" @bind-Value=@Dag.Titel />
                        </ChildContent>
                        <Helper>
                            <RadzenRequiredValidator Component="Titel" Text="Titel skal udfyldes." />
                        </Helper>
                    </RadzenFormField>


                    <RadzenFormField Text="Beskrivelse" Variant="@ThemeConfig.FormVariant">
                        <ChildContent>
                            <RadzenTextArea Name="Beskrivelse" @bind-Value="@Dag.Beskrivelse" Rows="4" />
                        </ChildContent>
                        <Helper>
                            <RadzenRequiredValidator Component="Beskrivelse" Text="Beskrivelse skal udfyldes." />
                        </Helper>
                    </RadzenFormField>

                    <RadzenFormField Text="Aktiviteter" Variant="@ThemeConfig.FormVariant">
                        <ChildContent>
                            <RadzenTextArea Name="Aktiviteter" @bind-Value="@Dag.Aktiviteter" Rows="4" />
                        </ChildContent>
                        <Helper>
                            <RadzenRequiredValidator Component="Aktiviteter" Text="Aktiviteter skal udfyldes." />
                        </Helper>
                    </RadzenFormField>

                    <RadzenFormField Text="Måltider" Variant="@ThemeConfig.FormVariant">
                        <ChildContent>
                            <RadzenTextArea Name="Måltider" @bind-Value="@Dag.Måltider" Rows="4" />
                        </ChildContent>
                    </RadzenFormField>

                    <RadzenFormField Text="Overnatning" Variant="@ThemeConfig.FormVariant">
                        <ChildContent>
                            <RadzenTextBox Name="Overnatning" @bind-Value=@Dag.Overnatning />
                        </ChildContent>
                    </RadzenFormField>

                    <RadzenButton ButtonType="ButtonType.Submit" Text="Opret"></RadzenButton>
                </RadzenStack>
            </RadzenTemplateForm>
        </div>

@code {
    [Inject] 
    private IDagRepository _dagRepository { get; set; } = default!;
    public DagCreateDto Dag { get; set; } = new DagCreateDto();

    Variant variant = Variant.Flat;
    string _token = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();

        _token = AuthStateProvider.CurrentUser.Token;
    }

    async Task OnSubmit(DagCreateDto model)
    {
        try{
        Console.WriteLine($"Titel: {Dag.Titel}\nBeskrivelse: {Dag.Beskrivelse}\nAktiviteter: {Dag.Aktiviteter}\nMåltider: {Dag.Måltider}\nOvernatning: {Dag.Overnatning}");
        await _dagRepository.CreateDagAsync(model, _token);
            Console.WriteLine("Dag oprettet");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Fejl ved oprettelse af dag: {ex.Message}");
        }
    }

    void OnInvalidSubmit(FormInvalidSubmitEventArgs args)
    {

    }
}
