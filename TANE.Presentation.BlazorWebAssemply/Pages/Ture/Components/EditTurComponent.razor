@using TANE.Application.Dtos
@using System.Collections.ObjectModel
@using TANE.Application.Dtos.Skabeloner
@using TANE.Application.Groups.Kunder.Queries.Interfaces
@using TANE.Application.RepositoryInterfaces
@using TANE.Domain.Entities
@using TANE.Presentation.BlazorWebAssemply.Configuration
@using TANE.Presentation.BlazorWebAssemply.Pages.Kunder.Component
@using TANE.Presentation.BlazorWebAssemply.Pages.Dage.Components
@using TANE.Presentation.BlazorWebAssemply.Pages.Ture.Components
@using TANE.Presentation.BlazorWebAssemply.Pages.Skabeloner.DagSkabeloner.Components
@inject CustomStateProvider AuthStateProvider
@inject IDagRepository DagRepository
@inject ITurRepository _TurRepository
@inject IReadKunde ReadKunde
@inject DialogService DialogService
@inject CustomerState CustomerState


<div class="rz-p-0 rz-p-md-12">
    <h4>Rediger tur</h4>
    <RadzenTemplateForm TItem="Tur" Data=@Tur Submit=@OnSubmit InvalidSubmit=@OnInvalidSubmit>
        <RadzenStack Gap="1rem" class="rz-p-sm-12">
            <!-- Titel -->
            <RadzenFormField Text="Titel" Variant="@ThemeConfig.FormVariant">
                <ChildContent>
                    <RadzenTextBox Name="Titel" @bind-Value=@Tur.Titel Style="width:100%" />
                </ChildContent>
                <Helper>
                    <RadzenRequiredValidator Component="Titel" Text="Titel skal udfyldes." />
                </Helper>
            </RadzenFormField>

            <!-- Beskrivelse -->
            <RadzenFormField Text="Beskrivelse" Variant="@ThemeConfig.FormVariant">
                <ChildContent>
                    <RadzenTextArea Name="Beskrivelse" @bind-Value=@Tur.Beskrivelse Rows="4" Style="width:100%" />
                </ChildContent>
                <Helper>
                    <RadzenRequiredValidator Component="Beskrivelse" Text="Beskrivelse skal udfyldes." />
                </Helper>
            </RadzenFormField>

            <!-- Antal Voksne / Antal Børn -->
            <RadzenStack Direction="Row" Gap="1rem">
                <RadzenFormField Text="Start" Variant="@ThemeConfig.FormVariant">
                    <ChildContent>
                        <RadzenDatePicker Name="Start" @bind-Value=@Tur.TurStartTidspunkt Style="width:100%" />
                    </ChildContent>
                </RadzenFormField>
                <RadzenFormField Text="Slut" Variant="@ThemeConfig.FormVariant">
                    <ChildContent>
                        <RadzenDatePicker Name="Slut" @bind-Value=@Tur.TurSlutTidspunkt Style="width:100%" />
                    </ChildContent>
                </RadzenFormField>
            </RadzenStack>

            <!-- Lufthavn -->
            <RadzenFormField Text="Pris" Variant="@ThemeConfig.FormVariant">
                <ChildContent>
                    <RadzenNumeric Name="Pris" @bind-Value=@Tur.Pris Style="width:100%" />
                </ChildContent>
            </RadzenFormField>

            <br />
            @if (Observabledage.Count < 1)
            {
                <h4>Ingen dage at vise</h4>
            }
            @if (Observabledage.Count > 0)
            { 
                
                <h4>Dage:</h4>
                <DagReorderListComponent InjectedDage="Observabledage" OnDelete="OnDagDelete"/>
                <div style="text-align: right; width: 100%;">

                </div>
            }
                    <RadzenButton ButtonType="ButtonType.Button" Size="ButtonSize.Medium"
                                  Style="width: 150px" Text="Tilføj Dag"
                                  Click="@(() => showAddDag = !showAddDag)"/>

            @if (showAddDag)
            {
                <RadzenButton Text="Opret Dag" ButtonType="ButtonType.Button" Click="OpenCreateDagDialog" />
            }

            <br />

            <RadzenButton ButtonType="ButtonType.Submit" Size="ButtonSize.Large" Text="@ButtonText" Style="width:200px" />
        </RadzenStack>
    </RadzenTemplateForm>
</div>

@code{
    Kunde? NyKunde { get; set; }
   [Parameter]
    public EventCallback<Tur> OnAdd { get; set; }
    [Parameter]
    public EventCallback<Tur> OnEdit { get; set; }

    [Parameter]
    public EventCallback<Tur> OnSaved { get; set; }

    [Parameter]
    public EventCallback<Tur> OnEditTur { get; set; }

    [Parameter] 
    public Tur? Tur { get; set; }


    [Parameter]
    public EventCallback<Tur> OnCreateTur { get; set; }

    [Parameter]
    public List<Dag> InjectedDage { get; set; } = new List<Dag>();
    
    string selectedCustomerEmail;  // Variable to hold selected customer email
    private string? _token;
    bool showAddDag = false;

    private ObservableCollection<Dag> SelecteddageVar = new ObservableCollection<Dag>();

    public ObservableCollection<Dag> Observabledage
    {
        get
        {
            return SelecteddageVar;
        }
        set 
        { 
            SelecteddageVar = value;
        }
    }


    public List<Dag> Dage { get; set; }
    private string ButtonText => Tur == null ? "Opret Tur" : "Opdater Tur";

    protected override async Task OnInitializedAsync()
    {
     
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        _token = AuthStateProvider.CurrentUser.Token;

        showAddDag = false;
    }

    async Task OnSubmit()
    {
        foreach (var dag in Observabledage)
        {
            if (dag.Id == 0)
            {
                await DagRepository.CreateDagAsync(dag, _token);
            }
        }
        await _TurRepository.UpdateTur(Tur.Id, Tur, _token);
        DialogService.Close();
    }

    void OnInvalidSubmit(FormInvalidSubmitEventArgs args)
    {

    }

    private async Task OnDagRowSelect(DagSkabelon dagSkabelon)
    {
      
    }


    private void OnDagDelete(Dag Dag)
    {
        Observabledage.Remove(Dag);
    }

    private async Task HandleAddDag(Dag dag)
    {
        Observabledage.Add(new Dag
        {
            Titel = dag.Titel,
            Beskrivelse = dag.Beskrivelse,
            Aktiviteter = dag.Aktiviteter,
            Måltider = dag.Måltider,
            Overnatning = dag.Overnatning,
            TurId = dag.TurId
        });
        showAddDag = false;
    }

    private async Task OpenCreateDagDialog()
    {
        var parameters = new Dictionary<string, object>
        {
            { "OnAdd", EventCallback.Factory.Create<Dag>(this, HandleAddDag) }
        };

    // Åbner CreateDagComponent i en dialog
        var result = await DialogService.OpenAsync<CreateDagComponent>("Opret Ny Dag", parameters);
    }
  

}

