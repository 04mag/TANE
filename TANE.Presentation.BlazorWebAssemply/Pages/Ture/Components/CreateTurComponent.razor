@using TANE.Application.Dtos
@using System.Collections.ObjectModel
@using TANE.Application.Dtos.Skabeloner
@using TANE.Application.Groups.Kunder.Queries.Interfaces
@using TANE.Application.RepositoryInterfaces
@using TANE.Domain.Entities
@using TANE.Presentation.BlazorWebAssemply.Configuration
@using TANE.Presentation.BlazorWebAssemply.Pages.Kunder.Component
@using TANE.Presentation.BlazorWebAssemply.Pages.Dage.Components
@using TANE.Presentation.BlazorWebAssemply.Pages.Ture.Components
@using TANE.Presentation.BlazorWebAssemply.Pages.Skabeloner.DagSkabeloner.Components
@inject CustomStateProvider AuthStateProvider
@inject IDagRepository DagRepository
@inject IReadKunde ReadKunde
@inject DialogService DialogService
@inject CustomerState CustomerState



<div class="rz-p-0 rz-p-md-12">
    <!-- Flex-container med 100% bredde -->



   

    <RadzenTemplateForm TItem="Tur" Data=@Tur Submit=@OnSubmit InvalidSubmit=@OnInvalidSubmit>
        <RadzenStack Gap="1rem" class="rz-p-sm-12">
            
    <div style="display:flex; justify-content:flex-end; margin-bottom:1rem;">
        <RadzenButton 
            ButtonType="ButtonType.Submit" 
            Size="ButtonSize.Large" 
            Text="@ButtonText" 
             />
    </div>
            

            <!-- Titel -->
            <RadzenFormField Text="Titel" Variant="@ThemeConfig.FormVariant">
                <ChildContent>
                    <RadzenTextBox Name="Titel" @bind-Value=@Tur.Titel Style="width: 100%"/>
                </ChildContent>
                <Helper>
                    <RadzenRequiredValidator Component="Titel" Text="Titel skal udfyldes."/>
                </Helper>
            </RadzenFormField>

            <!-- Beskrivelse -->
            <RadzenFormField Text="Beskrivelse" Variant="@ThemeConfig.FormVariant">
                <ChildContent>
                    <RadzenTextArea Name="Beskrivelse" @bind-Value=@Tur.Beskrivelse Rows="4" Style="width: 100%"/>
                </ChildContent>
                <Helper>
                    <RadzenRequiredValidator Component="Beskrivelse" Text="Beskrivelse skal udfyldes."/>
                </Helper>
            </RadzenFormField>

            <!-- Antal Voksne / Antal Børn -->
            <RadzenStack Direction="Row" Gap="1rem">
                <RadzenFormField Text="Start" Variant="@ThemeConfig.FormVariant">
                    <ChildContent>
                        <RadzenDatePicker Name="Start" @bind-Value=@Tur.TurStartTidspunkt Style="width: 100%"/>
                    </ChildContent>
                </RadzenFormField>
                <RadzenFormField Text="Slut" Variant="@ThemeConfig.FormVariant">
                    <ChildContent>
                        <RadzenDatePicker Name="Slut" @bind-Value=@Tur.TurSlutTidspunkt Style="width: 100%"/>
                    </ChildContent>
                </RadzenFormField>
            </RadzenStack>

            <!-- Lufthavn -->
            <RadzenFormField Text="Pris" Variant="@ThemeConfig.FormVariant">
                <ChildContent>
                    <RadzenNumeric Name="Pris" @bind-Value=@Tur.Pris Style="width: 100%"/>
                </ChildContent>
            </RadzenFormField>

            <br/>
            @if (Observabledage.Count < 1)
            {
                <h4>Ingen dage at vise</h4>
            }
            @if (Observabledage.Count > 0)
            {

                <h4>Dage:</h4>
                <DagReorderListComponent InjectedDage="Observabledage" OnDelete="OnDagDelete"/>
                <div style="text-align: right; width: 100%;">

                </div>
            }
            <div style="display: flex; gap: 10px; align-items: center;">
                <RadzenButton
                    ButtonType="ButtonType.Button"
                    Size="ButtonSize.Medium"
                    Style="width: 150px;"
                    Text="Vælg fra skabelon"
                    Click="@(() => showAddDag = !showAddDag)"/>

                <RadzenButton
                    ButtonType="ButtonType.Button"
                    Text="Ny dag"
                    Click="OpenCreateDagDialog"/>

            </div>
            @if (showAddDag)
            {
                <div style="border: 1px solid #ccc; padding: 1rem; border-radius: 6px; box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1); margin-bottom: 1rem;">
                    <DagSkabelonListComponent OnSelect="OnDagRowSelect"/>
                </div>
            }


            <br/>
        </RadzenStack>
    </RadzenTemplateForm>
</div>

@code{
    Kunde? NyKunde { get; set; }
    [Inject] 
    private ITurRepository _TurRepository { get; set; } = default!;

    [Parameter]
    public EventCallback<Tur> OnAdd { get; set; }
    [Parameter]
    public EventCallback<Tur> OnEdit { get; set; }

    [Parameter]
    public EventCallback<Tur> OnEditTur { get; set; }

    [Parameter] 
    public Tur? ExistingTur { get; set; }


    [Parameter]
    public EventCallback<Tur> OnCreateTur { get; set; }

    [Parameter]
    public List<Dag> InjectedDage { get; set; } = new List<Dag>();
    
    string selectedCustomerEmail;  // Variable to hold selected customer email
    private string? _token;
    bool showAddDag = false;

    private ObservableCollection<Dag> SelecteddageVar = new ObservableCollection<Dag>();

    public ObservableCollection<Dag> Observabledage
    {
        get
        {
            return SelecteddageVar;
        }
        set 
        { 
            SelecteddageVar = value;
        }
    }

    public Tur Tur { get; set; } = new Tur();

    public List<Dag> Dage { get; set; }
    private string ButtonText => ExistingTur == null ? "Opret Tur" : "Opdater Tur";

    protected override async Task OnInitializedAsync()
    {
        if (ExistingTur != null)
        {
            Tur = ExistingTur;
            StateHasChanged();
        }
        else
        {
            Tur = new Tur();
            Tur.Dage = new List<Dag>();
        }
    
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        _token = AuthStateProvider.CurrentUser.Token;

        showAddDag = false;

    }

    async Task OnSubmit()
    {
        if (ExistingTur != null)
        {
            await OnEditTur.InvokeAsync(Tur);
        }

        else
        {
            await OnCreateTur.InvokeAsync(Tur);
        }
        DialogService.Close();
    }

    void OnInvalidSubmit(FormInvalidSubmitEventArgs args)
    {

    }

    private async Task OnDagRowSelect(DagSkabelon dagSkabelon)
    {
        // mapping fra DagSkabelon til Dag
        var dag = new Dag
        {

            Titel = dagSkabelon.Titel,
            Beskrivelse = dagSkabelon.Beskrivelse,
            Aktiviteter = dagSkabelon.Aktiviteter,
            Måltider = dagSkabelon.Måltider,
            Overnatning = dagSkabelon.Overnatning,
            Sekvens = Tur.Dage.Count,

        };

        // tilføj dag til Tur
        Tur.Dage.Add(dag);

        // tilføj dag til ObservableCollection (for UI opdatering))
        Observabledage.Add(new Dag
        {
            Titel = dagSkabelon.Titel,
            Beskrivelse = dagSkabelon.Beskrivelse,
            Aktiviteter = dagSkabelon.Aktiviteter,
            Måltider = dagSkabelon.Måltider,
            Overnatning = dagSkabelon.Overnatning,
            Sekvens = Tur.Dage.Count,
        });
        showAddDag = false;
    }


    private void OnDagDelete(Dag Dag)
    {
        Observabledage.Remove(Dag);
    }

    private async Task HandleAddDag(Dag dag)
    {
        Tur.Dage.Add(dag);
        Observabledage.Add(new Dag
        {
            Titel = dag.Titel,
            Beskrivelse = dag.Beskrivelse,
            Aktiviteter = dag.Aktiviteter,
            Måltider = dag.Måltider,
            Overnatning = dag.Overnatning,
        });
        showAddDag = false;
    }

    private async Task OpenCreateDagDialog()
    {
        var parameters = new Dictionary<string, object>
        {
            { "OnAdd", EventCallback.Factory.Create<Dag>(this, HandleAddDag) }
        };

    // Åbner CreateDagComponent i en dialog
        var result = await DialogService.OpenAsync<CreateDagComponent>("Opret Ny Dag", parameters);
    }
    
}

