@using TANE.Application.Groups.Kunder.Queries
@using TANE.Application.Groups.Kunder.Queries.Interfaces
@using TANE.Domain.Entities
@using TANE.Presentation.BlazorWebAssemply.Configuration
@using TANE.Presentation.BlazorWebAssemply.Pages.Kunder.Component
@inject IReadKunde ReadKunde
@inject CustomStateProvider AuthStateProvider
@inject NavigationManager NavManager
@inject NotificationService NotificationService

@page "/kunde/oversigt"

<PageTitle>Kundeoversigt</PageTitle>

@if (Kunder != null)
{
    <KundeListComponent InjectedKunder="Kunder"
    OnEditKunde="OnRowEditPressed"
    OnDeleteKunde="OnRowDeletePressed" />
}
else
{
    <p>Indlæser...</p>
}

@code {
    private string _token = string.Empty;
    public List<Kunde>? Kunder { get; set; } = null;

    private async Task OnRowEditPressed(Kunde kunde)
    {
        Console.WriteLine($"Edit pressed for: {kunde.Id}");
        // Navigate to the edit page with the selected Kunde's ID
        NavManager.NavigateTo($"Kunde/rediger/{kunde.Id}");
    }

    private async Task OnRowDeletePressed(Kunde kunde)
    {
        Console.WriteLine($"Delete pressed for: {kunde.Id}");

    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await AuthStateProvider.RefreshTokenAsync(NavManager, NotificationService);
            Kunder = await ReadKunde.GetAllKunderAsync(AuthStateProvider.CurrentUser.Token);
        }
        catch
        {
            Kunder = new List<Kunde>();
        }
    }
}
