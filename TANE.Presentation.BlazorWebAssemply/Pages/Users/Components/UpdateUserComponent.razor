@using TANE.Domain.Entities
@using TANE.Application.Groups.Users.Interfaces
@using TANE.Application.Common.Exceptions
@using Radzen
@using Radzen.Blazor
@using TANE.Persistence.Repositories
@using TANE.Presentation.BlazorWebAssemply.Services
@using TANE.Application.RepositoryInterfaces
@inject NavigationManager NavigationManager
@inject NotificationService NotificationService
@inject CustomStateProvider AuthStateProvider
@inject IJwtTokenRepository JwtTokenRepository



<h4>Bruger: @AuthStateProvider.CurrentUser.Email</h4>

<RadzenTemplateForm TItem="PasswordModel" Data="@Pwd" Submit="@OnSubmit" InvalidSubmit="@OnInvalidSubmit">
    <RadzenStack Gap="1rem" Style="max-width:400px">

        <RadzenFormField Text="Nyt password">
            <ChildContent>
                <RadzenPassword Name="NewPassword" @bind-Value="Pwd.NewPassword" Style="width:100%" />
            </ChildContent>
            <Helper>
                <RadzenRequiredValidator Component="NewPassword" Text="Password kræves." />
                <RadzenRegexValidator Component="NewPassword"
                Pattern="^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*\W).{8,}$"
                Text="8+ tegn, 1 stort, 1 lille, 1 tal & 1 spec." />
            </Helper>
        </RadzenFormField>

        <RadzenFormField Text="Bekræft nyt password">
            <ChildContent>
                <RadzenPassword Name="ConfirmNew" @bind-Value="Pwd.ConfirmNewPassword" Style="width:100%" />
            </ChildContent>
            <Helper>
                <RadzenRequiredValidator Component="ConfirmNew" Text="Bekræft password." />
                <RadzenCompareValidator Component="ConfirmNew"
                Value="@Pwd.NewPassword"
                Text="Passwords skal være ens." />
            </Helper>
        </RadzenFormField>

        <RadzenButton ButtonType="ButtonType.Submit" Text="Opdater" Style="margin-top:1rem" />
    </RadzenStack>
</RadzenTemplateForm>


@code {
    public string email;


    class PasswordModel
    {
        public string NewPassword { get; set; } = "";
        public string ConfirmNewPassword { get; set; } = "";
    }

    PasswordModel Pwd = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await AuthStateProvider.RefreshTokenAsync(NavigationManager, NotificationService);
            await JwtTokenRepository.UpdateUserAsync(email, Pwd.NewPassword, AuthStateProvider.CurrentUser.Token);
            email = AuthStateProvider.CurrentUser.Email;
        }
        catch (Exception ex)
        {
            
        }
        
    }

    private void OnInvalidSubmit(FormInvalidSubmitEventArgs args)
    {
        NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Warning,
                Summary = "Valideringsfejl",
                Detail = "Tjek venligst, at alle felter er udfyldt korrekt.",
                Duration = 4000
            });
    }


    private async Task OnSubmit(PasswordModel model)
    {
        try
        {
            // Kald dit UpdateUserPassword-interface
            await JwtTokenRepository.UpdateUserAsync(
                AuthStateProvider.CurrentUser.Email,
                model.NewPassword,
                AuthStateProvider.CurrentUser.Token
            );

            // Success-notifikation
            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Success,
                    Summary = "Password opdateret",
                    Detail = $"Password for {email} er skiftet.",
                    Duration = 4000
                });

            NavigationManager.NavigateTo("/users");
        }
        catch (NotAuthorizedException ex)
        {
            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Ingen tilladelse",
                    Detail = ex.Message,
                    Duration = 4000
                });
        }
        catch (ConflictException ex)
        {
            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Warning,
                    Summary = "Konflikt",
                    Detail = ex.Message,
                    Duration = 4000
                });
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Ukendt fejl",
                    Detail = ex.Message,
                    Duration = 4000
                });
        }
    }
}
