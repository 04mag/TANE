@using TANE.Application.Groups.Users.Interfaces
@using TANE.Domain.Entities
@using TANE.Presentation.BlazorWebAssemply.Configuration
@using TANE.Application.Common.Exceptions;
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject NotificationService NotificationService
@inject CustomStateProvider AuthStateProvider
@inject IUpdateUser UpdateUser

<RadzenTemplateForm Data="@PasswordModel" TItem="UpdatePasswordModel" Submit="@OnSubmit" InvalidSubmit="@OnInvalidSubmit">
    <RadzenStack Gap="1rem" Class="rz-p-sm-12">
        <h4>Skift dit password</h4>

        <!-- Current password -->
        <RadzenFormField Text="Nuværende password" Variant="@ThemeConfig.FormVariant">
            <ChildContent>
                <RadzenPassword Name="CurrentPassword" @bind-Value="PasswordModel.CurrentPassword" Style="width:100%" />
            </ChildContent>
            <Helper>
                <RadzenRequiredValidator Component="CurrentPassword" Text="Nuværende password skal udfyldes." />
            </Helper>
        </RadzenFormField>

        <!-- New password -->
        <RadzenFormField Text="Nyt password" Variant="@ThemeConfig.FormVariant">
            <ChildContent>
                <RadzenPassword Name="NewPassword" @bind-Value="PasswordModel.NewPassword" Style="width:100%" />
            </ChildContent>
            <Helper>
                <RadzenRequiredValidator Component="NewPassword" Text="Nyt password skal udfyldes." />
                <RadzenRegexValidator Component="NewPassword"
                Pattern="^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*\W).{8,}$"
                Text="Password skal være mindst 8 tegn langt, indeholde mindst 1 stort bogstav, 1 lille bogstav, 1 tal og 1 specialtegn." />
            </Helper>
        </RadzenFormField>

        <!-- Confirm password -->
        <RadzenFormField Text="Bekræft nyt password" Variant="@ThemeConfig.FormVariant">
            <ChildContent>
                <RadzenPassword Name="ConfirmPassword" @bind-Value="PasswordModel.ConfirmPassword" Style="width:100%" />
            </ChildContent>
            <Helper>
                <RadzenRequiredValidator Component="ConfirmPassword" Text="Bekræft password." />
                <RadzenCompareValidator Component="ConfirmPassword"
                                        Value="@PasswordModel.NewPassword"
                                        Text="Passwords skal være ens." />
            </Helper>
        </RadzenFormField>

        <RadzenButton ButtonType="ButtonType.Submit" Text="Opdater password" Style="margin-top:1rem" />

    </RadzenStack>
</RadzenTemplateForm>


@code {
    private UpdatePasswordModel PasswordModel { get; set; } = new UpdatePasswordModel();

    Variant variant = ThemeConfig.FormVariant;

    private async Task OnSubmit(UpdatePasswordModel model)
    {
        try
        {
            await AuthStateProvider.RefreshTokenAsync(NavigationManager, NotificationService);

            var result = await UpdateUser.UpdatePasswordAsync(AuthStateProvider.CurrentUser.Token, model.CurrentPassword, model.NewPassword);

            if (result)
            {
                NotificationService.Notify(new NotificationMessage()
                    {
                        Severity = NotificationSeverity.Success,
                        Summary = "Password opdateret",
                        Detail = "Dit password er blevet opdateret.",
                        Duration = 4000
                    });

                PasswordModel = new UpdatePasswordModel();
            }
            else
            {
                NotificationService.Notify(new NotificationMessage()
                    {
                        Severity = NotificationSeverity.Error,
                        Summary = "Fejl ved opdatering af password",
                        Detail = "Prøv igen.",
                        Duration = 4000
                    });
            }
        }
        catch (NotAuthorizedException)
        {
            NotificationService.Notify(new NotificationMessage()
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Fejl ved opdatering af password",
                    Detail = "Adgang nægtet.",
                    Duration = 4000
                });
        }
        catch (ArgumentException)
        {
            NotificationService.Notify(new NotificationMessage()
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Fejl ved opdatering af password",
                    Detail = "Nuværende password er ikke indtastet korrekt.",
                    Duration = 4000
                });
        }
        catch (Exception)
        {
            NotificationService.Notify(new NotificationMessage()
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Fejl ved opdatering af password",
                    Detail = "Prøv igen.",
                    Duration = 4000
                });
        }
    }

    private void OnInvalidSubmit(FormInvalidSubmitEventArgs args)
    {

    }


    class UpdatePasswordModel
    {
        public string CurrentPassword { get; set; } = string.Empty;
        public string NewPassword { get; set; } = string.Empty;
        public string ConfirmPassword { get; set; } = string.Empty;
    }
}
